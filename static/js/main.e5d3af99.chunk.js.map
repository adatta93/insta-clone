{"version":3,"sources":["constants/routes.js","context/firebase-context.js","lib/firebase.js","context/user-context.js","helpers/protected.route.js","helpers/is-user-logged-in.js","App.js","hooks/use-auth-listener.js","index.js"],"names":["DASHBOARD","LOGIN","SIGNUP","PROFILE","NOT_FOUND","FirebaseContext","createContext","firebase","Firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","FieldValue","firestore","UserContext","ProtectedRoute","user","children","rest","render","location","to","pathname","ROUTES","state","from","IsUserLggedIn","Login","lazy","SignUp","Dashboard","Profile","NotFound","App","useState","localStorage","getItem","setUser","useContext","useEffect","listener","auth","onAuthStateChanged","authUser","setItem","JSON","stringify","removeItem","useAuthListener","Provider","value","fallback","path","exact","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"iHAAA,0KAAO,IAAMA,EAAY,IACZC,EAAQ,SACRC,EAAS,UACTC,EAAU,eACVC,EAAY,c,gCCJzB,WAEMC,EAAkBC,wBAAc,MAEvBD,O,gCCJf,gFAeME,GAfN,YAeiBC,IAASC,cATX,CACbC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,+CAIDC,EAAeR,IAASS,UAAxBD,Y,gCChBR,WAEME,EAAcZ,wBAAc,MAEnBY,O,mLCDA,SAASC,EAAT,GAAsD,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,SAAaC,EAAQ,mCAClE,OACE,cAAC,IAAD,2BACMA,GADN,IAEEC,OAAQ,YAAmB,IAAhBC,EAAe,EAAfA,SACT,OAAIJ,EACKC,EAEJD,EAOE,KALH,cAAC,IAAD,CACEK,GAAI,CAAEC,SAAUC,IAAcC,MAAO,CAAEC,KAAML,UCX5C,SAASM,EAAT,GAAqD,IAA5BV,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,SAAaC,EAAQ,mCACjE,OACE,cAAC,IAAD,2BACMA,GADN,IAEEC,OAAQ,YAAmB,IAAhBC,EAAe,EAAfA,SACT,OAAKJ,EAGDA,EAEA,cAAC,IAAD,CACEK,GAAI,CAAEC,SAAUC,IAAkBC,MAAO,CAAEC,KAAML,MAIhD,KATEH,MCDjB,IAAMU,EAAQC,gBAAK,kBAAM,gCACnBC,EAASD,gBAAK,kBAAM,gCACpBE,EAAYF,gBAAK,kBAAM,6DACvBG,EAAUH,gBAAK,kBAAM,sDACrBI,EAAWJ,gBAAK,kBAAM,sDA2BbK,MAzBf,WAAgB,IACNjB,ECZK,WAA4B,IAAD,EAChBkB,mBAASC,aAAaC,QAAQ,kBADd,mBACjCpB,EADiC,KAC3BqB,EAD2B,KAEhClC,EAAamC,qBAAWrC,KAAxBE,SAgBR,OAdAoC,qBAAU,WACR,IAAIC,EAAWrC,EAASsC,OAAOC,oBAAmB,SAACC,GAC7CA,GACFR,aAAaS,QAAQ,gBAAiBC,KAAKC,UAAUH,IACrDN,EAAQM,KAERR,aAAaY,WAAW,iBACxBV,EAAQ,UAIZ,OAAO,kBAAMG,QAGR,CAAExB,QDNQgC,GAAThC,KACR,OACE,cAAC,IAAYiC,SAAb,CAAsBC,MAAO,CAAElC,QAA/B,SACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUmC,SAAU,2CAApB,SACE,eAAC,IAAD,WACE,cAACzB,EAAD,CAAeV,KAAMA,EAAMoC,KAAM7B,IAAjC,SACE,cAACI,EAAD,MAEF,cAACD,EAAD,CAAeV,KAAMA,EAAMoC,KAAM7B,IAAjC,SACE,cAACM,EAAD,MAEF,cAACd,EAAD,CAAgBC,KAAMA,EAAMoC,KAAM7B,IAAkB8B,OAAK,EAAzD,SACE,cAACvB,EAAD,MAEF,cAAC,IAAD,CAAOsB,KAAM7B,IAAgB+B,UAAWvB,IACxC,cAAC,IAAD,CAAOuB,UAAWtB,c,QExB9BuB,IAASpC,OACP,cAAC,IAAMqC,WAAP,UACE,cAAC,IAAgBP,SAAjB,CAA0BC,MAAO,CAAE/C,aAAUS,gBAA7C,SACE,cAAC,EAAD,QAGJ6C,SAASC,eAAe,W","file":"static/js/main.e5d3af99.chunk.js","sourcesContent":["export const DASHBOARD = \"/\";\r\nexport const LOGIN = \"/login\";\r\nexport const SIGNUP = \"/signup\";\r\nexport const PROFILE = \"/p/:username\";\r\nexport const NOT_FOUND = \"/not-found\";\r\n","import { createContext } from \"react\";\r\n\r\nconst FirebaseContext = createContext(null);\r\n\r\nexport default FirebaseContext;\r\n","import Firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n// seeding DB...uncomment only once\r\n//import { seedDatabase } from \"../seed\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCzDmr6boO98CoAESKDPUKNgJWLkdJzkhw\",\r\n  authDomain: \"insta-clone-6c2c7.firebaseapp.com\",\r\n  projectId: \"insta-clone-6c2c7\",\r\n  storageBucket: \"insta-clone-6c2c7.appspot.com\",\r\n  messagingSenderId: \"527300392761\",\r\n  appId: \"1:527300392761:web:531da4515fda1628511ae8\",\r\n};\r\n\r\nconst firebase = Firebase.initializeApp(config);\r\nconst { FieldValue } = Firebase.firestore;\r\n\r\n// 2) when seeding the database you'll have to uncomment this!\r\n//seedDatabase(firebase);\r\n// 3) once you have populated the database (only run once!), re-comment this so you don't get duplicate data\r\n\r\nexport { firebase, FieldValue };\r\n","import { createContext } from \"react\";\r\n\r\nconst UserContext = createContext(null);\r\n\r\nexport default UserContext;\r\n","import * as ROUTES from \"../constants/routes\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\n\r\nexport default function ProtectedRoute({ user, children, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) => {\r\n        if (user) {\r\n          return children;\r\n        }\r\n        if (!user) {\r\n          return (\r\n            <Redirect\r\n              to={{ pathname: ROUTES.LOGIN, state: { from: location } }}\r\n            />\r\n          );\r\n        }\r\n        return null;\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import * as ROUTES from \"../constants/routes\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\n\r\nexport default function IsUserLggedIn({ user, children, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) => {\r\n        if (!user) {\r\n          return children;\r\n        }\r\n        if (user) {\r\n          return (\r\n            <Redirect\r\n              to={{ pathname: ROUTES.DASHBOARD, state: { from: location } }}\r\n            />\r\n          );\r\n        }\r\n        return null;\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { lazy, Suspense } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport * as ROUTES from \"./constants/routes\";\nimport useAuthListener from \"./hooks/use-auth-listener\";\nimport UserContext from \"./context/user-context\";\nimport ProtectedRoute from \"./helpers/protected.route\";\nimport IsUserLggedIn from \"./helpers/is-user-logged-in\";\n\nconst Login = lazy(() => import(\"./pages/login-page\"));\nconst SignUp = lazy(() => import(\"./pages/signup-page\"));\nconst Dashboard = lazy(() => import(\"./pages/dashboard-page\"));\nconst Profile = lazy(() => import(\"./pages/profile-page\"));\nconst NotFound = lazy(() => import(\"./pages/not-found-page\"));\n\nfunction App() {\n  const { user } = useAuthListener();\n  return (\n    <UserContext.Provider value={{ user }}>\n      <Router>\n        <Suspense fallback={<p>Loading...</p>}>\n          <Switch>\n            <IsUserLggedIn user={user} path={ROUTES.LOGIN}>\n              <Login />\n            </IsUserLggedIn>\n            <IsUserLggedIn user={user} path={ROUTES.SIGNUP}>\n              <SignUp />\n            </IsUserLggedIn>\n            <ProtectedRoute user={user} path={ROUTES.DASHBOARD} exact>\n              <Dashboard />\n            </ProtectedRoute>\n            <Route path={ROUTES.PROFILE} component={Profile} />\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n","import { useContext, useEffect, useState } from \"react\";\r\nimport FirebaseContext from \"../context/firebase-context\";\r\n\r\nexport default function useAuthListener() {\r\n  const [user, setUser] = useState(localStorage.getItem(\"authUserInsta\"));\r\n  const { firebase } = useContext(FirebaseContext);\r\n\r\n  useEffect(() => {\r\n    let listener = firebase.auth().onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        localStorage.setItem(\"authUserInsta\", JSON.stringify(authUser));\r\n        setUser(authUser);\r\n      } else {\r\n        localStorage.removeItem(\"authUserInsta\");\r\n        setUser(null);\r\n      }\r\n    });\r\n\r\n    return () => listener();\r\n  });\r\n\r\n  return { user };\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport FirebaseContext from \"./context/firebase-context\";\nimport { firebase, FieldValue } from \"./lib/firebase\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseContext.Provider value={{ firebase, FieldValue }}>\n      <App />\n    </FirebaseContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}